name: Deploy and Smoke Extended (manual)

on:
  workflow_dispatch:
    inputs:
      base_url:
        description: "Base URL del entorno (ej: https://app.onrender.com)"
        required: false
        default: "https://paste12-rmsk.onrender.com"
      deploy_hook_url:
        description: "Render Deploy Hook URL (opcional)"
        required: false
        default: ""
      cloudflare_zone_id:
        description: "Cloudflare Zone ID (opcional)"
        required: false
        default: ""
      purge_paths:
        description: "Rutas a purgar (coma-separadas)"
        required: false
        default: "/,/js/app.js,/css/styles.css"
      vercel_deploy_hook_url:
        description: "Vercel Deploy Hook URL (opcional)"
        required: false
        default: ""
      netlify_deploy_hook_url:
        description: "Netlify Deploy Hook URL (opcional)"
        required: false
        default: ""
      ghcr_image:
        description: "Imagen GHCR (ej: ghcr.io/owner/app)"
        required: false
        default: ""
      ecr_registry:
        description: "AWS ECR registry (ej: 123.dkr.ecr.us-east-1.amazonaws.com)"
        required: false
        default: ""
      ecr_repository:
        description: "AWS ECR repository (ej: myapp)"
        required: false
        default: ""
      kube_namespace:
        description: "K8s namespace para rollout (opcional)"
        required: false
        default: ""
      kube_deployment:
        description: "K8s deployment name para rollout (opcional)"
        required: false
        default: ""
      kube_container:
        description: "K8s container name dentro del deployment (opcional)"
        required: false
        default: ""

  # Push trigger disabled for extended workflow (use manual dispatch)

concurrency:
  group: deploy-and-smoke-ext-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  # No-op guard so push events don't produce a failed 0s run
  guard:
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Skip extended workflow on non-manual events
        run: echo "Skipping extended workflow on event: ${{ github.event_name }}"

  deploy_and_smoke:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    name: Deploy, Health, Purge, Smokes
    runs-on: ubuntu-latest
    env:
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID || '' }}
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN || '' }}
      BASE_URL: ${{ secrets.BASE_URL }}
      RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      VERCEL_DEPLOY_HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK }}
      NETLIFY_DEPLOY_HOOK: ${{ secrets.NETLIFY_DEPLOY_HOOK }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq curl python3

      - name: Resolve env (BASE_URL and hooks)
        run: |
          set -euo pipefail
          in_base=$(jq -r '.inputs.base_url // ""' "$GITHUB_EVENT_PATH" 2>/dev/null || echo "")
          base="$in_base"
          if [ -z "$base" ]; then base="${BASE_URL:-}"; fi
          if [ -z "$base" ]; then base="https://paste12-rmsk.onrender.com"; fi
          echo "BASE_URL=$base" >> "$GITHUB_ENV"
          echo "DEPLOY_HOOK_URL=${RENDER_DEPLOY_HOOK:-}" >> "$GITHUB_ENV"
          echo "VERCEL_HOOK=${VERCEL_DEPLOY_HOOK:-}" >> "$GITHUB_ENV"
          echo "NETLIFY_HOOK=${NETLIFY_DEPLOY_HOOK:-}" >> "$GITHUB_ENV"
          echo "PURGE_PATHS=/,/js/app.js,/css/styles.css" >> "$GITHUB_ENV"

      - name: Trigger deploy hook (Render)
        if: ${{ env.DEPLOY_HOOK_URL != '' }}
        run: curl -fsS -X POST "$DEPLOY_HOOK_URL" -d '' || true

      - name: Trigger deploy hook (Vercel)
        if: ${{ env.VERCEL_HOOK != '' }}
        run: curl -fsS -X POST "$VERCEL_HOOK" -d '' || true

      - name: Trigger deploy hook (Netlify)
        if: ${{ env.NETLIFY_HOOK != '' }}
        run: curl -fsS -X POST "$NETLIFY_HOOK" -d '' || true

      - name: Wait for health
        run: |
          set -euo pipefail
          echo "Esperando salud en: $BASE_URL/api/health"
          tools/verify_boot_after_deploy_v1.sh "$BASE_URL" "/tmp"

      - name: Purge Cloudflare (optional)
        if: env.CF_ZONE_ID != '' && env.CF_API_TOKEN != ''
        env:
          ZONE_ID: ${{ env.CF_ZONE_ID }}
          TOKEN: ${{ env.CF_API_TOKEN }}
        run: |
          set -euo pipefail
          IFS=',' read -ra paths <<< "${PURGE_PATHS}"
          payload=$(jq -nc --arg base "$BASE_URL" --argjson p "$(printf '%s\n' "${paths[@]}" | jq -R . | jq -s .)" '{files: ($p | map($base + .))}')
          echo "Purging: $payload"
          curl -fsS -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/purge_cache" \
            --data "$payload" || true

      - name: Run smokes
        id: run_smokes
        run: |
          set -euo pipefail
          chmod +x tools/run_smoke_now_v3.sh || true
          mkdir -p e2e-artifacts
          tools/run_smoke_now_v3.sh "$BASE_URL" "$(pwd)/e2e-artifacts" || true
          chmod +x tools/smoke_api.sh
          set +e
          tools/smoke_api.sh "$BASE_URL" > e2e-artifacts/smoke_api.txt 2>&1
          rc=$?
          set -e
          echo "api_rc=$rc" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: e2e-artifacts

      - name: Fail if API smoke failed
        if: ${{ steps.run_smokes.outputs.api_rc != '0' }}
        run: |
          echo "API smoke failed" >&2
          exit 1

