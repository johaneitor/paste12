name: Deploy and Smoke

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (staging|prod)"
        required: false
        default: staging
      base_url:
        description: "Override BASE URL (e.g., https://app.example.com)"
        required: false
  push:
    branches:
      - main
      - staging
      - production

concurrency:
  group: deploy-smoke-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (optional)
        if: ${{ secrets.GHCR_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: local/paste12:${{ github.sha }}

      - name: Derive BASE and Deploy Hook
        id: cfg
        shell: bash
        run: |
          set -euo pipefail
          env_target="${{ github.event.inputs.environment || 'staging' }}"
          base="${{ github.event.inputs.base_url || '' }}"
          if [[ -z "$base" ]]; then
            if [[ "$env_target" == "prod" || "$env_target" == "production" ]]; then
              base="${{ secrets.BASE_URL_PROD }}"
            else
              base="${{ secrets.BASE_URL_STAGING }}"
            fi
          fi
          if [[ -z "$base" ]]; then
            echo "BASE URL not provided; set inputs.base_url or BASE_URL_STAGING/BASE_URL_PROD secrets" >&2
            exit 2
          fi
          # Render deploy hook (optional)
          if [[ "$env_target" == "prod" || "$env_target" == "production" ]]; then
            hook="${{ secrets.RENDER_DEPLOY_HOOK_PROD }}"
          else
            hook="${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}"
          fi
          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "hook=$hook" >> "$GITHUB_OUTPUT"

      - name: Trigger deploy (Render Deploy Hook)
        if: steps.cfg.outputs.hook != ''
        shell: bash
        run: |
          set -euo pipefail
          curl -fsS -X POST "${{ steps.cfg.outputs.hook }}" -H 'Accept: application/json' -o /tmp/deploy.json || {
            echo "WARN: deploy hook call failed or not configured" >&2; exit 1; }
          echo "Deploy hook response:"; head -c 400 /tmp/deploy.json || true

      - name: Wait for health
        shell: bash
        run: |
          set -euo pipefail
          base="${{ steps.cfg.outputs.base }}"
          echo "Waiting for $base/api/health ..."
          for i in $(seq 1 120); do
            code=$(curl -sS -o /tmp/hb -w '%{http_code}' "$base/api/health" || echo 000)
            if [[ "$code" == 200 ]] && grep -q '"ok":\s*true' /tmp/hb; then
              echo "Health OK"; break
            fi
            sleep 2
            if [[ $i -eq 120 ]]; then echo "Timeout waiting for health" >&2; exit 1; fi
          done

      - name: Purge CDN cache (Cloudflare optional)
        if: ${{ secrets.CF_API_TOKEN != '' && secrets.CF_ZONE_ID != '' }}
        shell: bash
        run: |
          set -euo pipefail
          base="${{ steps.cfg.outputs.base }}"
          files=("$base/" "$base/index.html" "$base/js/app.js" "$base/js/actions.js" "$base/css/actions.css")
          body=$(printf '{"files":[%s]}' "$(printf '"%s",' "${files[@]}" | sed 's/,$//')")
          curl -fsS -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
               -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
               -H 'Content-Type: application/json' \
               --data "$body" -o /tmp/cf.json
          echo "CF purge response:"; head -c 400 /tmp/cf.json || true

      - name: Install helpers
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Run smokes (collect artifacts)
        id: smoke
        shell: bash
        run: |
          set -euo pipefail
          base="${{ steps.cfg.outputs.base }}"
          art="$RUNNER_TEMP/p12-artifacts"
          mkdir -p "$art"

          echo "== run_smoke_now_v3 =="
          bash tools/run_smoke_now_v3.sh "$base" "$art" || true

          echo "== smoke_api =="
          set +e
          bash tools/smoke_api.sh "$base" > "$art/smoke_api.txt" 2>&1
          api_rc=$?
          set -e

          echo "== smoke_index_integrity =="
          bash tools/smoke_index_integrity.sh "$base" > "$art/index_integrity.txt" 2>&1 || true

          echo "== smoke_pagination_and_buttons =="
          if [[ -f tools/smoke_pagination_and_buttons.sh ]]; then
            bash tools/smoke_pagination_and_buttons.sh "$base" > "$art/pagination.txt" 2>&1 || true
          fi

          echo "api_rc=$api_rc" >> "$GITHUB_OUTPUT"
          echo "art_dir=$art" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: p12-smoke-${{ github.sha }}-${{ github.run_id }}
          path: ${{ steps.smoke.outputs.art_dir }}
          if-no-files-found: warn

      - name: Fail if API smoke failed
        if: ${{ steps.smoke.outputs.api_rc != '0' }}
        shell: bash
        run: |
          echo "API smoke failed with code ${{ steps.smoke.outputs.api_rc }}" >&2
          exit 1
