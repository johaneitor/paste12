import os
from datetime import datetime, timezone, timedelta
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_cors import CORS
from apscheduler.schedulers.background import BackgroundScheduler
from zoneinfo import ZoneInfo

db = SQLAlchemy()

def create_app():
    app = Flask(__name__, instance_relative_config=True)
    # --- Config ----------------------------------------------------------------
    os.makedirs(app.instance_path, exist_ok=True)
    app.config.from_mapping(
        SECRET_KEY         = os.getenv("SECRET_KEY", "dev-secret"),
        SQLALCHEMY_DATABASE_URI = os.getenv(
            "DATABASE_URI",
            "sqlite:///" + os.path.join(app.instance_path, "production.db")
        ),
        SQLALCHEMY_TRACK_MODIFICATIONS = False,
        RATELIMIT_STORAGE_URL = os.getenv("REDIS_URL", "memory://"),
        JSON_SORT_KEYS = False,
    )
    # --- Extensiones ------------------------------------------------------------
    db.init_app(app)
    Limiter(key_func=get_remote_address, app=app, default_limits=["30 per minute"])
    CORS(app)

    # --- Blueprints -------------------------------------------------------------
    from . import routes
    app.register_blueprint(routes.bp)

    # --- Tareas programadas -----------------------------------------------------
    from .tasks import purge_expired
    sch = BackgroundScheduler(timezone=timezone.utc)
    sch.add_job(lambda: purge_expired(app), "interval", minutes=30)
    sch.start()

    # --- DB inicial -------------------------------------------------------------
    with app.app_context():
        db.create_all()
    return app
