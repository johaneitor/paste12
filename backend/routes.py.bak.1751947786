from flask import Blueprint, request, jsonify, current_app
from datetime import datetime, timezone
from .models import Note
from . import db

bp = Blueprint("api", __name__, url_prefix="/api")

@bp.get("/notes")
def get_notes():
    page = max(int(request.args.get("page", 1)), 1)
    per_page = 20
    pagination = Note.query.order_by(Note.timestamp.desc()).paginate(page=page, per_page=per_page, error_out=False)
    notes = [{
        "id": n.id,
        "text": n.text,
        "timestamp": n.timestamp.isoformat(),
        "expires_at": n.expires_at.isoformat(),
        "reports": n.reports,
    } for n in pagination.items]
    return jsonify({"notes": notes, "page": page, "total_pages": pagination.pages})

@bp.post("/notes")
def create_note():
    data = request.form or request.json or {}
    text = (data.get("text") or "").strip()
    if not text or len(text) > 500:
        return {"error": "Texto vacÃ­o o >500 caracteres"}, 400
    note = Note(text=text)
    db.session.add(note)
    db.session.commit()
    return {"id": note.id}, 201

@bp.delete("/notes/<int:note_id>")

@bp.before_request
def require_token():
    if request.method == "DELETE":
        token = request.headers.get("X-Auth-Token")
        if token != os.getenv("ADMIN_TOKEN", "changeme"):
            return {"error": "No autorizado"}, 403

def delete_note(note_id):
    note = Note.query.get_or_404(note_id)
    db.session.delete(note)
    db.session.commit()
    return "", 204
